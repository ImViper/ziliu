import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { db } from '@/lib/db';
import { publishPresets, users } from '@/lib/db/schema';
import { eq, and } from 'drizzle-orm';
import { createId } from '@paralleldrive/cuid2';

// 获取用户的所有预设
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.email) {
      return NextResponse.json({
        success: false,
        error: '请先登录',
      }, { status: 401 });
    }

    // 获取用户信息
    const user = await db.query.users.findFirst({
      where: eq(users.email, session.user.email),
    });

    if (!user) {
      return NextResponse.json({
        success: false,
        error: '用户不存在',
      }, { status: 404 });
    }

    // 获取用户的所有预设
    const presets = await db.query.publishPresets.findMany({
      where: eq(publishPresets.userId, user.id),
      orderBy: (presets, { desc }) => [desc(presets.isDefault), desc(presets.updatedAt)],
    });

    // 直接返回预设数据（新字段不需要JSON解析）
    const presetsWithParsedData = presets;

    return NextResponse.json({
      success: true,
      data: presetsWithParsedData,
    });
  } catch (error) {
    console.error('获取预设失败:', error);
    return NextResponse.json({
      success: false,
      error: '获取预设失败',
    }, { status: 500 });
  }
}

// 创建新预设
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.email) {
      return NextResponse.json({
        success: false,
        error: '请先登录',
      }, { status: 401 });
    }

    // 获取用户信息
    const user = await db.query.users.findFirst({
      where: eq(users.email, session.user.email),
    });

    if (!user) {
      return NextResponse.json({
        success: false,
        error: '用户不存在',
      }, { status: 404 });
    }

    const body = await request.json();
    const {
      name,
      authorName,
      autoGenerateDigest = true,
      headerContent = '',
      footerContent = '',
      isDefault = false,
    } = body;

    // 如果设置为默认预设，先取消其他预设的默认状态
    if (isDefault) {
      await db.update(publishPresets)
        .set({ isDefault: false })
        .where(eq(publishPresets.userId, user.id));
    }

    // 创建新预设
    const presetId = createId();
    await db.insert(publishPresets).values({
      id: presetId,
      userId: user.id,
      name,
      authorName,
      autoGenerateDigest,
      headerContent,
      footerContent,
      isDefault,
    });

    // 获取创建的预设
    const newPreset = await db.query.publishPresets.findFirst({
      where: eq(publishPresets.id, presetId),
    });

    return NextResponse.json({
      success: true,
      data: newPreset,
      message: '预设创建成功',
    });
  } catch (error) {
    console.error('创建预设失败:', error);
    return NextResponse.json({
      success: false,
      error: '创建预设失败',
    }, { status: 500 });
  }
}
